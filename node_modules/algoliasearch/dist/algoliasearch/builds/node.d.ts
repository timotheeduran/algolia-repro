import type { AbtestingClient } from '@algolia/client-abtesting';
import type { Region as AbtestingRegion } from '@algolia/client-abtesting/src/abtestingClient';
import type { AnalyticsClient } from '@algolia/client-analytics';
import type { Region as AnalyticsRegion } from '@algolia/client-analytics/src/analyticsClient';
import type { ClientOptions } from '@algolia/client-common';
import type { PersonalizationClient } from '@algolia/client-personalization';
import type { Region as PersonalizationRegion } from '@algolia/client-personalization/src/personalizationClient';
import type { RecommendClient } from '@algolia/recommend';
import type { InitClientOptions, InitClientRegion, GenerateSecuredApiKeyOptions, GetSecuredApiKeyRemainingValidityOptions } from './models';
export * from './models';
export declare const apiClientVersion = "5.0.0";
/**
 * The client type.
 */
export type Algoliasearch = ReturnType<typeof algoliasearch>;
export declare function algoliasearch(appId: string, apiKey: string, options?: ClientOptions): {
    _ua: string;
    initAbtesting: (initOptions?: InitClientOptions & InitClientRegion<AbtestingRegion>) => AbtestingClient;
    initAnalytics: (initOptions?: InitClientOptions & InitClientRegion<AnalyticsRegion>) => AnalyticsClient;
    initPersonalization: (initOptions: InitClientOptions & Required<InitClientRegion<PersonalizationRegion>>) => PersonalizationClient;
    initRecommend: (initOptions?: InitClientOptions) => RecommendClient;
    /**
     * Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     *
     * @summary Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     * @param generateSecuredApiKey - The `generateSecuredApiKey` object.
     * @param generateSecuredApiKey.parentApiKey - The base API key from which to generate the new secured one.
     * @param generateSecuredApiKey.restrictions - A set of properties defining the restrictions of the secured API key.
     */
    generateSecuredApiKey({ parentApiKey, restrictions, }: GenerateSecuredApiKeyOptions): string;
    /**
     * Helper: Retrieves the remaining validity of the previous generated `securedApiKey`, the `ValidUntil` parameter must have been provided.
     *
     * @summary Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.
     * @param getSecuredApiKeyRemainingValidity - The `getSecuredApiKeyRemainingValidity` object.
     * @param getSecuredApiKeyRemainingValidity.securedApiKey - The secured API key generated with the `generateSecuredApiKey` method.
     */
    getSecuredApiKeyRemainingValidity({ securedApiKey, }: GetSecuredApiKeyRemainingValidityOptions): number;
    transporter: import("@algolia/client-common").Transporter;
    appId: string;
    clearCache(): Promise<void>;
    addAlgoliaAgent(segment: string, version?: string): void;
    waitForTask({ indexName, taskID, maxRetries, timeout, }: import("@algolia/client-search/model/clientMethodProps").WaitForTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getTaskResponse").GetTaskResponse>;
    waitForAppTask({ taskID, maxRetries, timeout, }: import("@algolia/client-search/model/clientMethodProps").WaitForAppTaskOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getTaskResponse").GetTaskResponse>;
    waitForApiKey({ operation, key, apiKey, maxRetries, timeout, }: import("@algolia/client-search/model/clientMethodProps").WaitForApiKeyOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getApiKeyResponse").GetApiKeyResponse | undefined>;
    browseObjects<T>({ indexName, browseParams, ...browseObjectsOptions }: import("@algolia/client-search/model/clientMethodProps").BrowseOptions<import("@algolia/client-search/model/browseResponse").BrowseResponse<T>> & import("@algolia/client-search/model/clientMethodProps").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/browseResponse").BrowseResponse<T>>;
    browseRules({ indexName, searchRulesParams, ...browseRulesOptions }: import("@algolia/client-search/model/clientMethodProps").BrowseOptions<import("@algolia/client-search/model/searchRulesResponse").SearchRulesResponse> & import("@algolia/client-search/model/clientMethodProps").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchRulesResponse").SearchRulesResponse>;
    browseSynonyms({ indexName, searchSynonymsParams, ...browseSynonymsOptions }: import("@algolia/client-search/model/clientMethodProps").BrowseOptions<import("@algolia/client-search/model/searchSynonymsResponse").SearchSynonymsResponse> & import("@algolia/client-search/model/clientMethodProps").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchSynonymsResponse").SearchSynonymsResponse>;
    searchForHits<T>(searchMethodParams: import("@algolia/client-search/model/clientMethodProps").LegacySearchMethodProps | import("@algolia/client-search/model/searchMethodParams").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: Array<import("@algolia/client-search/model/searchResponse").SearchResponse<T>>;
    }>;
    searchForFacets(searchMethodParams: import("@algolia/client-search/model/clientMethodProps").LegacySearchMethodProps | import("@algolia/client-search/model/searchMethodParams").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<{
        results: import("@algolia/client-search/model/searchForFacetValuesResponse").SearchForFacetValuesResponse[];
    }>;
    chunkedBatch({ indexName, objects, action, waitForTasks, batchSize, }: import("@algolia/client-search/model/clientMethodProps").ChunkedBatchOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/batchResponse").BatchResponse[]>;
    saveObjects({ indexName, objects }: import("@algolia/client-search/model/clientMethodProps").SaveObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/batchResponse").BatchResponse[]>;
    deleteObjects({ indexName, objectIDs }: import("@algolia/client-search/model/clientMethodProps").DeleteObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/batchResponse").BatchResponse[]>;
    partialUpdateObjects({ indexName, objects, createIfNotExists }: import("@algolia/client-search/model/clientMethodProps").PartialUpdateObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/batchResponse").BatchResponse[]>;
    replaceAllObjects({ indexName, objects, batchSize }: import("@algolia/client-search/model/clientMethodProps").ReplaceAllObjectsOptions, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/replaceAllObjectsResponse").ReplaceAllObjectsResponse>;
    addApiKey(apiKey: import("@algolia/client-search/model/apiKey").ApiKey, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/addApiKeyResponse").AddApiKeyResponse>;
    addOrUpdateObject({ indexName, objectID, body }: import("@algolia/client-search/model/clientMethodProps").AddOrUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtWithObjectIdResponse").UpdatedAtWithObjectIdResponse>;
    appendSource(source: import("@algolia/client-search/model/source").Source, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/createdAtResponse").CreatedAtResponse>;
    assignUserId({ xAlgoliaUserID, assignUserIdParams }: import("@algolia/client-search/model/clientMethodProps").AssignUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/createdAtResponse").CreatedAtResponse>;
    batch({ indexName, batchWriteParams }: import("@algolia/client-search/model/clientMethodProps").BatchProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/batchResponse").BatchResponse>;
    batchAssignUserIds({ xAlgoliaUserID, batchAssignUserIdsParams }: import("@algolia/client-search/model/clientMethodProps").BatchAssignUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/createdAtResponse").CreatedAtResponse>;
    batchDictionaryEntries({ dictionaryName, batchDictionaryEntriesParams, }: import("@algolia/client-search/model/clientMethodProps").BatchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    browse<T>({ indexName, browseParams }: import("@algolia/client-search/model/clientMethodProps").BrowseProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/browseResponse").BrowseResponse<T>>;
    clearObjects({ indexName }: import("@algolia/client-search/model/clientMethodProps").ClearObjectsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    clearRules({ indexName, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").ClearRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    clearSynonyms({ indexName, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").ClearSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    customDelete({ path, parameters }: import("@algolia/client-search/model/clientMethodProps").CustomDeleteProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customGet({ path, parameters }: import("@algolia/client-search/model/clientMethodProps").CustomGetProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customPost({ path, parameters, body }: import("@algolia/client-search/model/clientMethodProps").CustomPostProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    customPut({ path, parameters, body }: import("@algolia/client-search/model/clientMethodProps").CustomPutProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    deleteApiKey({ key }: import("@algolia/client-search/model/clientMethodProps").DeleteApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deleteApiKeyResponse").DeleteApiKeyResponse>;
    deleteBy({ indexName, deleteByParams }: import("@algolia/client-search/model/clientMethodProps").DeleteByProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deletedAtResponse").DeletedAtResponse>;
    deleteIndex({ indexName }: import("@algolia/client-search/model/clientMethodProps").DeleteIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deletedAtResponse").DeletedAtResponse>;
    deleteObject({ indexName, objectID }: import("@algolia/client-search/model/clientMethodProps").DeleteObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deletedAtResponse").DeletedAtResponse>;
    deleteRule({ indexName, objectID, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").DeleteRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    deleteSource({ source }: import("@algolia/client-search/model/clientMethodProps").DeleteSourceProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deleteSourceResponse").DeleteSourceResponse>;
    deleteSynonym({ indexName, objectID, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").DeleteSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/deletedAtResponse").DeletedAtResponse>;
    getApiKey({ key }: import("@algolia/client-search/model/clientMethodProps").GetApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getApiKeyResponse").GetApiKeyResponse>;
    getAppTask({ taskID }: import("@algolia/client-search/model/clientMethodProps").GetAppTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getTaskResponse").GetTaskResponse>;
    getDictionaryLanguages(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, import("@algolia/client-search/model/languages").Languages>>;
    getDictionarySettings(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getDictionarySettingsResponse").GetDictionarySettingsResponse>;
    getLogs({ offset, length, indexName, type }?: import("@algolia/client-search/model/clientMethodProps").GetLogsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search/model/getLogsResponse").GetLogsResponse>;
    getObject({ indexName, objectID, attributesToRetrieve }: import("@algolia/client-search/model/clientMethodProps").GetObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<Record<string, any>>;
    getObjects<T>(getObjectsParams: import("@algolia/client-search/model/getObjectsParams").GetObjectsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getObjectsResponse").GetObjectsResponse<T>>;
    getRule({ indexName, objectID }: import("@algolia/client-search/model/clientMethodProps").GetRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/rule").Rule>;
    getSettings({ indexName }: import("@algolia/client-search/model/clientMethodProps").GetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/settingsResponse").SettingsResponse>;
    getSources(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/source").Source[]>;
    getSynonym({ indexName, objectID }: import("@algolia/client-search/model/clientMethodProps").GetSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/synonymHit").SynonymHit>;
    getTask({ indexName, taskID }: import("@algolia/client-search/model/clientMethodProps").GetTaskProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getTaskResponse").GetTaskResponse>;
    getTopUserIds(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/getTopUserIdsResponse").GetTopUserIdsResponse>;
    getUserId({ userID }: import("@algolia/client-search/model/clientMethodProps").GetUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/userId").UserId>;
    hasPendingMappings({ getClusters }?: import("@algolia/client-search/model/clientMethodProps").HasPendingMappingsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search/model/hasPendingMappingsResponse").HasPendingMappingsResponse>;
    listApiKeys(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/listApiKeysResponse").ListApiKeysResponse>;
    listClusters(requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/listClustersResponse").ListClustersResponse>;
    listIndices({ page, hitsPerPage }?: import("@algolia/client-search/model/clientMethodProps").ListIndicesProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search/model/listIndicesResponse").ListIndicesResponse>;
    listUserIds({ page, hitsPerPage }?: import("@algolia/client-search/model/clientMethodProps").ListUserIdsProps, requestOptions?: import("@algolia/client-common").RequestOptions | undefined): Promise<import("@algolia/client-search/model/listUserIdsResponse").ListUserIdsResponse>;
    multipleBatch(batchParams: import("@algolia/client-search/model/batchParams").BatchParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/multipleBatchResponse").MultipleBatchResponse>;
    operationIndex({ indexName, operationIndexParams }: import("@algolia/client-search/model/clientMethodProps").OperationIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    partialUpdateObject({ indexName, objectID, attributesToUpdate, createIfNotExists, }: import("@algolia/client-search/model/clientMethodProps").PartialUpdateObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtWithObjectIdResponse").UpdatedAtWithObjectIdResponse>;
    removeUserId({ userID }: import("@algolia/client-search/model/clientMethodProps").RemoveUserIdProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/removeUserIdResponse").RemoveUserIdResponse>;
    replaceSources({ source }: import("@algolia/client-search/model/clientMethodProps").ReplaceSourcesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/replaceSourceResponse").ReplaceSourceResponse>;
    restoreApiKey({ key }: import("@algolia/client-search/model/clientMethodProps").RestoreApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/addApiKeyResponse").AddApiKeyResponse>;
    saveObject({ indexName, body }: import("@algolia/client-search/model/clientMethodProps").SaveObjectProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/saveObjectResponse").SaveObjectResponse>;
    saveRule({ indexName, objectID, rule, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").SaveRuleProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedRuleResponse").UpdatedRuleResponse>;
    saveRules({ indexName, rules, forwardToReplicas, clearExistingRules, }: import("@algolia/client-search/model/clientMethodProps").SaveRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    saveSynonym({ indexName, objectID, synonymHit, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").SaveSynonymProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/saveSynonymResponse").SaveSynonymResponse>;
    saveSynonyms({ indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms, }: import("@algolia/client-search/model/clientMethodProps").SaveSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    search<T>(searchMethodParams: import("@algolia/client-search/model/clientMethodProps").LegacySearchMethodProps | import("@algolia/client-search/model/searchMethodParams").SearchMethodParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchResponses").SearchResponses<T>>;
    searchDictionaryEntries({ dictionaryName, searchDictionaryEntriesParams, }: import("@algolia/client-search/model/clientMethodProps").SearchDictionaryEntriesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchDictionaryEntriesResponse").SearchDictionaryEntriesResponse>;
    searchForFacetValues({ indexName, facetName, searchForFacetValuesRequest, }: import("@algolia/client-search/model/clientMethodProps").SearchForFacetValuesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchForFacetValuesResponse").SearchForFacetValuesResponse>;
    searchRules({ indexName, searchRulesParams }: import("@algolia/client-search/model/clientMethodProps").SearchRulesProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchRulesResponse").SearchRulesResponse>;
    searchSingleIndex<T>({ indexName, searchParams }: import("@algolia/client-search/model/clientMethodProps").SearchSingleIndexProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchResponse").SearchResponse<T>>;
    searchSynonyms({ indexName, searchSynonymsParams }: import("@algolia/client-search/model/clientMethodProps").SearchSynonymsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchSynonymsResponse").SearchSynonymsResponse>;
    searchUserIds(searchUserIdsParams: import("@algolia/client-search/model/searchUserIdsParams").SearchUserIdsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/searchUserIdsResponse").SearchUserIdsResponse>;
    setDictionarySettings(dictionarySettingsParams: import("@algolia/client-search/model/dictionarySettingsParams").DictionarySettingsParams, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    setSettings({ indexName, indexSettings, forwardToReplicas }: import("@algolia/client-search/model/clientMethodProps").SetSettingsProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updatedAtResponse").UpdatedAtResponse>;
    updateApiKey({ key, apiKey }: import("@algolia/client-search/model/clientMethodProps").UpdateApiKeyProps, requestOptions?: import("@algolia/client-common").RequestOptions): Promise<import("@algolia/client-search/model/updateApiKeyResponse").UpdateApiKeyResponse>;
};
//# sourceMappingURL=node.d.ts.map